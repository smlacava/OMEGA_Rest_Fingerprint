%% PIPELINE
% 1) Data is imported
% 2) Data is preprocessed (notch and high-pass filtered at 0.3 Hz, cleaned
%    from ECG artifacts)
% 3) Preprocessed data is resampled and divided into epochs
% 4) Sources are estimated from each epoch
% 5) Scouts are extracted from such sources
% 6) Sources are reprojected from a subject onto other subject's cortices
% 7) Scouts are extracted from reprojected sources

% Directory of Brainstorm projects
bsDir = 'C:\Users\simon\OneDrive\Desktop\Ricerca\EEGLab\'; 

% Dataset
inDir = 'D:\MEG\OMEGA_OpenNeuro_raw - Copia';

% Output directory
outDir = char(strcat(inDir, filesep, 'results'));

% Resulting data folder in bsDir
ProtocolName = 'OmegaProva';

% Inverse measure with minnorm method (amplitude, sloreta or dspm)
srcType = 'amplitude';

% Condition
condition = '_task-rest_meg_clean_resample_high';

% Parameters
epTime = 2;
nEpochs = 5;
resample = 1000;
EventsTimeRange = [-0.1, 3]; % Fixed
% fband=[0.3, 0]; %low cut and high cut, if high cut is used, then highpass

%% FBAND?

scout = 'Desikan-Killiany';
ROIs = {'bankssts L', 'bankssts R', 'caudalanteriorcingulate L',...
        'caudalanteriorcingulate R', 'caudalmiddlefrontal L',...
        'caudalmiddlefrontal R', 'cuneus L', 'cuneus R',...
        'entorhinal L', 'entorhinal R', 'frontalpole L', ...
        'frontalpole R', 'fusiform L', 'fusiform R', ...
        'inferiorparietal L', 'inferiorparietal R', ...
        'inferiortemporal L', 'inferiortemporal R', 'insula L', ...
        'insula R', 'isthmuscingulate L', 'isthmuscingulate R', ...
        'lateraloccipital L', 'lateraloccipital R', ...
        'lateralorbitofrontal L', 'lateralorbitofrontal R', ...
        'lingual L', 'lingual R', 'medialorbitofrontal L', ...
        'medialorbitofrontal R', 'middletemporal L', ...
        'middletemporal R', 'paracentral L', 'paracentral R', ...
        'parahippocampal L', 'parahippocampal R', ...
        'parsopercularis L', 'parsopercularis R', 'parsorbitalis L', ...
        'parsorbitalis R', 'parstriangularis L', 'parstriangularis R', ...
        'pericalcarine L', 'pericalcarine R', 'postcentral L', ...
        'postcentral R', 'posteriorcingulate L', ...
        'posteriorcingulate R', 'precentral L', 'precentral R', ...
        'precuneus L', 'precuneus R', 'rostralanteriorcingulate L', ...
        'rostralanteriorcingulate R', 'rostralmiddlefrontal L', ...
        'rostralmiddlefrontal R', 'superiorfrontal L', ...
        'superiorfrontal R', 'superiorparietal L', ...
        'superiorparietal R', 'superiortemporal L', ...
        'superiortemporal R', 'supramarginal L', 'supramarginal R', ...
        'temporalpole L', 'temporalpole R', 'transversetemporal L', ...
        'transversetemporal R'};

[rawFiles, fs, t] = initialization(ProtocolName, inDir, bsDir, ...
    epTime, nEpochs, resample);
subjects = subjects_list(rawFiles);
filtFiles = preprocessing(rawFiles);
cleanFiles = artifact_cleaning();
importFiles = import_raws(cleanFiles, t, epTime, EventsTimeRange, fs, ...
    nEpochs);
%sourceFiles = source_estimation(importFiles, 0, measure);
%scoutFiles = scout_extraction(sourceFiles, scout, ROIs);

sourceFiles = source_estimation(importFiles, 0, srcType);
scoutFiles = scout_extraction(sourceFiles, scout, ROIs, bsDir, ...
    ProtocolName, outDir);



N = length(subjects);
for i = 1:N
    srcSubject = subjects{i};
    newSourceFiles = sources_projection(sourceFiles, srcSubject, ...
        bsDir, ProtocolName, [], srcType);
    scout_extraction_reprojected(newSourceFiles, ...
        scout, ROIs, srcSubject, epTime, bsDir, ProtocolName, outDir);
end
% for i = 1:length(subjects)
%     srcSubject = subjects{i};
%     newSourceFiles = sources_projection(sourceFiles, srcSubject, bsDir, ...
%         ProtocolName);
%     projectedScoutFiles = scout_extraction_reprojected(newSourceFiles, ...
%         scout, ROIs, srcSubject, epTime);
% end
disp(1)   


function subjects = subjects_list(rawFiles)
    subjects = {};
    for i = 1:length(rawFiles)
        if contains(string(rawFiles(i).SubjectName), "sub-") && ...
                not(contains(string(rawFiles(i).SubjectName), "emptyroom"))
            subjects = [subjects, rawFiles(i).SubjectName];
        end
    end
end
