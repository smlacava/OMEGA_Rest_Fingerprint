bsDir = 'C:\Users\simon\OneDrive\Desktop\Ricerca\EEGLab\';
inDir = 'D:\MEG\OMEGA_OpenNeuro';
ProtocolName = 'Omega_Study';

rawFiles = initialization(ProtocolName, inDir);
filtFiles = preprocessing(rawFiles);
cleanFiles = artifact_cleaning();
sourceFiles = source_estimation(filtFiles, cleanFiles);
%psdSourcesFiles = power_maps(sourceFiles);



function rawFiles = initialization(ProtocolName, inDir)
    if ~brainstorm('status')
        brainstorm nogui
    end
    gui_brainstorm('Delete[Lorg.brainstorm.tree.BstNode;@133a3020Protocol', ProtocolName);
    gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
    bst_report('Start');
    rawFiles = bst_process('CallProcess', 'process_import_bids', [], ...
        [], 'bidsdir', {inDir, 'BIDS'}, 'nvertices', 15000, ...
        'channelalign', 0);
end

function filtFiles = preprocessing(rawFiles)
    rawFiles = bst_process('CallProcess', 'process_headpoints_remove', ...
        rawFiles, [], 'zlimit', 0);
    bst_process('CallProcess', 'process_headpoints_refine', ...
        rawFiles, []);
    rawFiles = bst_process('CallProcess', 'process_ctf_convert', ...
        rawFiles, [], 'rectype', 2);
    filtFiles = filter(rawFiles);
    bst_process('CallProcess', 'process_delete', [rawFiles], [], ...
        'target', 2);
end


function filtered = filter(rawFiles)
    aux = bst_process('CallProcess', 'process_notch', rawFiles, [], ...
        'freqlist', [60, 120, 180, 240, 300], 'sensortypes', ...
        'MEG, EEG', 'read_all', 1);

    filtered = bst_process('CallProcess', 'process_bandpass', aux, [], ...
        'sensortypes', 'MEG, EEG', 'highpass', 0.3, 'lowpass', 0, ...
        'attenuation', 'strict', 'mirror',  0, 'useold', 0, 'read_all', 1);
    bst_process('CallProcess', 'process_delete', [aux], [], 'target', 2);
end

function cleanFiles = artifact_cleaning()
    filtered = bst_process('CallProcess', 'process_select_files_data', ...
        [], [], 'subjectname', 'All');
    cleanFiles = bst_process('CallProcess', 'process_select_tag', ...
        filtered, [], 'tag', 'task-rest', 'search', 1, 'select', 1); 
    bst_process('CallProcess', 'process_evt_detect_ecg', cleanFiles, ...
        [], 'channelname', 'ECG', 'timewindow', [], 'eventname', ...
        'cardiac');
    bst_process('CallProcess', 'process_ssp_ecg', cleanFiles, [], ...
        'eventname', 'cardiac', 'sensortypes', 'MEG', 'usessp', 1, ...
        'select', 1);
    bst_process('CallProcess', 'process_snapshot', cleanFiles, [], ...
        'target', 1, 'modality', 1, 'orient', 1);
    bst_process('CallProcess', 'process_snapshot', cleanFiles, [], ...
        'target', 2, 'modality', 1);
end

function sourceFiles = source_estimation(filtFiles, cleanFiles)
    noiseFiles = bst_process('CallProcess', 'process_select_tag', ...
        filtFiles, [], 'tag', 'task-noise', 'search', 1, 'select', 1); 
    bst_process('CallProcess', 'process_noisecov', noiseFiles, [], ...
        'baseline', [], 'sensortypes', 'MEG', 'target', 1, ... 
        'dcoffset', 1, 'identity', 0, 'copycond', 1, 'copysubj', 1, ...
        'copymatch', 1, 'replacefile', 1);
    bst_process('CallProcess', 'process_headmodel', cleanFiles, [], ...
        'sourcespace', 1, 'meg', 3);
    sourceFiles = bst_process('CallProcess', 'process_inverse_2018', ...
        cleanFiles, [], 'output', 2, 'inverse', ...
        struct('Comment', 'dSPM: MEG', 'InverseMethod', 'minnorm', ...
        'InverseMeasure', 'dspm2018', 'SourceOrient', {{'fixed'}}, ...
        'Loose', 0.2, 'UseDepth', 1, 'WeightExp', 0.5, ...
        'WeightLimit', 10, 'NoiseMethod', 'reg', 'NoiseReg', 0.1, ...
        'SnrMethod', 'fixed', 'SnrRms', 1e-06, 'SnrFixed', 3, ...
         'ComputeKernel', 1, 'DataTypes', {{'MEG'}}));
end


function psdSourcesFiles = power_maps(sourceFiles)
    freqs = {{'delta', '2, 4', 'mean'; 'theta', '5, 7', 'mean'; ...
        'alpha', '8, 12', 'mean'; 'beta', '15, 29', 'mean'; 'gamma1', ...
        '30, 59', 'mean'; 'gamma2', '60, 90', 'mean'}};

    psdFiles = bst_process('CallProcess', 'process_psd', ...
        sourceFiles, [], 'timewindow', [0, 100], 'win_length',  4, ...
        'win_overlap', 50, 'clusters', {}, 'scoutfunc', 1, ... 
        'edit', struct('Comment', 'Power,FreqBands', 'TimeBands', [], ...
        'Freqs', freqs, 'ClusterFuncTime', 'none', 'Measure', 'power', ...
        'Output', 'all', 'SaveKernel', 0));
    psdNormFiles = bst_process('CallProcess', 'process_tf_norm', ...
        psdFiles, [], 'normalize', 'relative', 'overwrite', 0);
    projFiles = bst_process('CallProcess', 'process_project_sources', ...
        psdNormFiles, [], 'headmodeltype', 'surface');
    projFiles = bst_process('CallProcess', 'process_ssmooth_surfstat', ...
        projFiles, [], 'fwhm', 3,  'overwrite', 1);
    psdSourcesFiles = bst_process('CallProcess', 'process_average', ...
        projFiles, [], 'avgtype', 1, 'avg_func', 1, 'weighted', 0, ...
        'matchrows', 0, 'iszerobad', 0);
end



function set_common_head_model(bsDir, ProtocolName, subject_head, ...
    session, rest_run, pattern)
    head_model = strcat(subject_head, '/@raw', subject_head, '_ses-', ...
        session, '_task-rest_run-', rest_run, ...
        '_meg_notch_high/headmodel_surf_os_meg.mat');
    dataDir = strcat(bsDir, filesep, ProtocolName, filesep, 'data', ...
        filesep);
    cases = dir(fullfile(dataDir));
    for i = 1:length(cases)
        if contains(cases(i).name, pattern)
            fName = strcat(dataDir, cases(i).name);
            aux = load(fName);
            aux.HeadModelFile = head_model;
            save(fName,'-struct','aux')
        end
    end
end